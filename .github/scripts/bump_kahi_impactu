#!/usr/bin/env python
import argparse
import importlib
import re
import os
import sys
from glob import glob
try:
    from git import Repo
except ImportError:
    print("Please run: pip install git-python")
    sys.exit(1)

upstream_url = "git@github.com:colav/Kahi_plugins.git"
upstream_name = "origin"


def bump_kahi_impactu(repo, repo_path, plugins):
    file = open(os.path.join(repo_path, 'Kahi_impactu/setup.py'), 'r+')
    setup = file.read()
    for plugin in plugins:
        plugin_file = os.path.join(
            repo_path, plugin, plugin.lower(), "_version.py")
        plugin_spec = importlib.util.spec_from_file_location(
            plugin, plugin_file)
        plugin_mod = importlib.util.module_from_spec(plugin_spec)
        sys.modules[plugin] = plugin_mod
        plugin_spec.loader.exec_module(plugin_mod)
        version = plugin_mod.get_version()
        setup = re.sub(
            rf"({re.escape(plugin)}==\d+\.\d+\.\d+(?:[-a-z0-9]*)?)",
            f"{plugin}=={version}",
            setup,
            flags=re.IGNORECASE
        )

        del sys.modules[plugin]
    file.seek(0)
    file.truncate()
    file.write(setup)
    file.close()
    repo.index.add([os.path.join(repo_path, 'Kahi_impactu/setup.py')])
    repo.index.commit('[Kahi_impactu] Bump plugin version')
    repo.git.push(upstream_name, 'main')


def bump_plugin_tags(repo, repo_path, plugins):

    for plugin in plugins:
        plugin_file = os.path.join(
            repo_path, plugin, plugin.lower(), "_version.py")
        plugin_spec = importlib.util.spec_from_file_location(
            plugin, plugin_file)
        plugin_mod = importlib.util.module_from_spec(plugin_spec)
        sys.modules[plugin] = plugin_mod
        plugin_spec.loader.exec_module(plugin_mod)
        version = plugin_mod.get_version()
        del sys.modules[plugin]
        tag = f"{plugin}/v{version}"
        if tag not in repo.tags:
            repo.create_tag(tag, message='Bump version to v{}'.format(version))
            repo.git.push(upstream_name, tag)


argparser = argparse.ArgumentParser()
argparser.add_argument('repo_path', help='Path to the repository')

if __name__ == "__main__":
    args = argparser.parse_args()
    repo_path = args.repo_path

    # initialize the repository
    repo = Repo(repo_path)
    plugins = glob("Kahi_*")
    plugins.remove("Kahi_template")

    # adding the remote upstream if it does not exist
    if upstream_url != repo.remotes.origin.url:
        print(
            f"ERROR: The origin remote is not the same as the {upstream_url} remote")
        print(
            f"Plese use the main repository {upstream_url} to run this script and try again.")
        sys.exit(1)
    bump_kahi_impactu(repo, repo_path, plugins)
    bump_plugin_tags(repo, repo_path, plugins)
